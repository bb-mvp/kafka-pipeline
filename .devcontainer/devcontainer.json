// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.245.2/containers/python-3-postgres
// Update the VARIANT arg in docker-compose.yml to pick a Python version
{
	"name": "Python 3 & PostgreSQL",
	"dockerComposeFile": "docker-compose.yml",
	"service": "app",
	"workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",
	// Configure tool-specific properties.
	"customizations": {
		// Configure properties specific to VS Code.
		"vscode": {
			// Set *default* container specific settings.json values on container create.
			"settings": {
				"python.defaultInterpreterPath": "/usr/local/bin/python",
				"python.linting.enabled": true,
				"python.linting.pylintEnabled": true,
				"python.formatting.autopep8Path": "/usr/local/py-utils/bin/autopep8",
				"python.formatting.blackPath": "/usr/local/py-utils/bin/black",
				"python.formatting.provider": "black",
				"python.formatting.yapfPath": "/usr/local/py-utils/bin/yapf",
				"python.linting.banditPath": "/usr/local/py-utils/bin/bandit",
				"python.linting.flake8Path": "/usr/local/py-utils/bin/flake8",
				"python.linting.mypyPath": "/usr/local/py-utils/bin/mypy",
				"python.linting.pycodestylePath": "/usr/local/py-utils/bin/pycodestyle",
				"python.linting.pydocstylePath": "/usr/local/py-utils/bin/pydocstyle",
				"python.linting.pylintPath": "/usr/local/py-utils/bin/pylint",
				"python.testing.pytestPath": "/usr/local/py-utils/bin/pytest",
				"editor.formatOnSave": true,
				"files.associations": {
					"*.spec": "gauge",
					"*.cpt": "gauge"
				},
				"files.autoSave": "afterDelay",
				"files.autoSaveDelay": 500
			},
			// Add the IDs of extensions you want installed when the container is created.
			"extensions": [
				"ms-python.python",
				"ms-python.vscode-pylance",
				"ckolkman.vscode-postgres",
				"timonwong.shellcheck",
				"getgauge.gauge",
				"redhat.vscode-xml"
			]
		}
	},
	"containerEnv": {
		"DATABASE_NAME": "transactions",
		"DATABASE_HOST": "localhost",
		"DATABASE_USERNAME": "postgres",
		"DATABASE_PASSWORD": "postgres",
		"DATABASE_PORT": "5432"
	},
	"remoteEnv": {
		"PATH": "${containerEnv:PATH}:/usr/local/bin/liquibase",
		"PGUSER": "${containerEnv:DATABASE_USERNAME}",
		"PGHOST": "${containerEnv:DATABASE_HOST}",
		"DATABASE_HOST": "${containerEnv:DATABASE_HOST}",
		"DATABASE_NAME": "${containerEnv:DATABASE_NAME}",
		"DATABASE_USERNAME": "${containerEnv:DATABASE_USERNAME}",
		"DATABASE_PASSWORD": "${containerEnv:DATABASE_PASSWORD}",
		"DATABASE_PORT": "${containerEnv:DATABASE_PORT}",
		"LIQUIBASE_CLASSPATH": "/usr/local/bin/liquibase/internal/lib/postgresql.jar",
		"LIQUIBASE_HEADLESS": "true",
		"LIQUIBASE_HUB_MODE": "off",
		"LIQUIBASE_CHANGELOG_FILE": "dbchangelog.xml",
		"LIQUIBASE_STRICT": "true",
		// Temporary workaround for https://github.com/getgauge/gauge-python/issues/256
		// See: https://github.com/protocolbuffers/protobuf/issues/10051#issuecomment-1138671075
		"PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION": "python"
	},
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// This can be used to network with other containers or the host.
	"forwardPorts": [
		5432
	],
	// Use 'postCreateCommand' to run commands after the container is created.
	"postCreateCommand": "scripts/create_database.sh && scripts/liquibase_update.sh",
	"features": {
		"java": "lts"
	},
	// Comment out to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "vscode"
}